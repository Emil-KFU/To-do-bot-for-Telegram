
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters
from functions import dateparser, timeparser, timeDifferenceInSec
import logging
import sqlite3
import re
from datetime import date, datetime, timedelta


logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)

logger = logging.getLogger(__name__)



def start(bot, update):

    update.message.reply_text('–ü—Ä–∏–≤–µ—Ç, –≤–≤–µ–¥–∏ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏')
    chat_id = update.message.chat_id
    chat_usr = update.message.from_user.username


    checkuser(chat_id, chat_usr)


def help(bot, update):

    update.message.reply_text('üî¥ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!! üî¥ \n'
                              '–∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å–æ –º–Ω–æ–π:\n\n'
                              ' üìÖ –ü–æ–º–æ—â–Ω–∏–∫ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–µ–ª üìÖ\n'
                              '/schedule   - –ø–æ–∫–∞–∑–∞—Ç—å –¥–µ–ª–∞ –≤ –∑–∞–¥–∞–Ω–Ω—ã–π –¥–µ–Ω—å üìì \n'
                              '/remember   - –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–µ–ª–æ üìå \n'
                              '/info      - –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –æ—Ç–Ω–æ—Å—è—â—É—é—Å—è –∫ –¥–µ–ª—É\n'
                              '/forget    - —É–¥–∞–ª–∏—Ç—å –¥–µ–ª–æ ‚ùå \n'
                              '/free          - —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–µ–ª–∞ (‚ö†–í–Ω–∏–º–∞–Ω–∏–µ‚ö†)\n\n')


def remember(bot, update, args, job_queue, chat_data):

    chat_id = update.message.chat_id
    chat_usr = update.message.from_user.username


    checkuser(chat_id, chat_usr)

    codu = getuser(chat_id)

    name = ""
    date = ""
    place = ""
    time = ""
    desc = ""
    if len(args) < 2:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∑–∞–±—É–¥—å, —á—Ç–æ —è –Ω–µ –∑–Ω–∞—é –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n"
                                  "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, –Ω–∞–ø–∏—à–∏: \n\n"
                                  "/remember <–¥–µ–ª–æ><–¥–∞—Ç–∞><–º–µ—Å—Ç–æ><–≤—Ä–µ–º—è><–æ–ø–∏—Å–∞–Ω–∏–µ>\n\n"
                                  " –ø—Ä–∏–º–µ—Ä: '/remember –æ–±–µ–¥ 12/10/2021 –ö–∞–∑–∞–Ω—å_–∫–≤–∞—Ä—Ç–∏—Ä–∞_–∫—É—Ö–Ω—è 14:00 –æ–±–µ–¥ —Å —Å–µ–º—å—ë–π'")
        return
    else:
        i = 0
        for par in args[0:]:
            i += 1
            matchObj = re.fullmatch(r'([^\s!/]+)', par, re.M | re.I)
            if matchObj:
                name += (matchObj.group()+" ")
                continue
            matchObj = re.match(r'[0-9]{2}/[0-9]{2}/[0-9]{4}', par, re.M | re.I)
            if matchObj:
                date = matchObj.group()
                break

        for par in args[i:]:
            i += 1
            matchObj = re.fullmatch(r'([^\s!:]+)', par, re.M | re.I)
            if matchObj:
                place += (matchObj.group()+" ")
                continue
            matchObj = re.match(r'[0-9]{2}:[0-9]{2}', par, re.M | re.I)
            if matchObj:
                time = matchObj.group()
                break

        for par in args[i:]:
            desc += (re.match(r'([^\s]+)', par, re.M | re.I).group()+" ")

    if time == "":
        time = "08:00"

    if dateparser(date) != -1 and timeparser(time) != -1:
        conn = sqlite3.connect('todo.db')
        c = conn.cursor()

        c.execute("INSERT INTO todos (uid, name, date, place, time, descr) "
                  "VALUES(?,?,?,?,?,?)", (codu, name, date, place, time, desc))
        conn.commit()
        conn.close()

        due_datetime = datetime.combine(dateparser(date),
                                        timeparser(time))
        today_date = datetime.now()

        diff_in_sec = timeDifferenceInSec(due_datetime, today_date) - 5400
        set_timer(update, diff_in_sec, job_queue, chat_id, chat_data)

        update.message.reply_text("–ü–æ–Ω—è–ª! –ù–µ –≤–æ–ª–Ω—É–π—Å—è, —è –∑–∞–ø–æ–º–Ω—é —ç—Ç–æ –¥–ª—è —Ç–µ–±—è üí™ \n")
    else:
        update.message.reply_text("‚ùå –≠–π, –¥—Ä—É–≥ —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –∏–ª–∏ –¥–∞—Ç—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π \n"
                                  "–ó–∞–ø–æ–º–Ω–∏, –¥–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –≤–∏–¥ : –¥–¥/–º–º/–≥–≥–≥–≥ \n"
                                  "–∏ –≤—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: —á—á:–º–º \n\n ")


def alarm(bot, job):

    bot.send_message(job.context, text='‚úî –≠–π, –¥—Ä—É–≥, —Ç—ã –¥–æ–ª–∂–µ–Ω –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –∫–∞–∫–æ–º—É-—Ç–æ –¥–µ–ª—É —á–µ—Ä–µ–∑ –ø–æ–ª—á–∞—Å–∞... '
                                       '–ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ–∏ –¥–µ–ª–∞, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π!')


def set_timer(update, args, job_queue, chat_id, chat_data):

    try:

        due = int(args)
        #if due < 0:
         #   update.message.reply_text('–ò–∑–≤–∏–Ω–∏, –º—ã –Ω–µ –º–æ–∂–µ–º –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—à–ª–æ–µ!')
          #  return


        job = job_queue.run_once(alarm, due, context=chat_id)
        chat_data['job'] = job
        update.message.reply_text('–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–ª–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!')

    except (IndexError, ValueError):
        update.message.reply_text('–î—Ä—É–≥, —É –º–µ–Ω—è –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è! '
                                  '–ü—Ä–æ—à—É —É–¥–∞–ª–∏—Ç—å/–≤–≤–µ—Å—Ç–∏ –¥–µ–ª–æ —Å–Ω–æ–≤–∞!')


def unset(bot, update, chat_data):

    if 'job' not in chat_data:

        return

    job = chat_data['job']
    job.schedule_removal()
    del chat_data['job']




def info(bot, update, args):

    chat_id = update.message.chat_id
    chat_usr = update.message.from_user.username


    checkuser(chat_id, chat_usr)

    codu = getuser(chat_id)

    if len(args) == 0:
        update.message.reply_text("–î—Ä—É–≥, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –¥–µ–ª–∞, –æ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—á–µ—à—å –∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ!\n"
                                  "–ø—Ä–∏–º–µ—Ä: /info <–Ω–æ–º–µ—Ä_–¥–µ–ª–∞>")
    else:
        conn = sqlite3.connect('todo.db')
        c = conn.cursor()
        print("SELECT * FROM todos WHERE uid="+str(codu)+" and tid="+str(args[0]))
        c.execute('SELECT * FROM todos WHERE uid=? and tid=?', (codu, args[0]))
        data = c.fetchone()
        if data[0] is not None:
            update.message.reply_text("üîª –ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è '"+data[2]+"'\n\n" +
                                      "–ù–∞–∑–≤–∞–Ω–∏–µ –¥–µ–ª–∞: "+data[2]+"\n" +
                                      "üìÜ –°–æ—Å—Ç–æ–∏—Ç—Å—è: "+data[3]+"\n" +
                                      "‚è∞ –≤: "+data[5] + "\n" +
                                      "üåç –≤: "+str(data[4]).upper()+ "\n" +
                                      "üìé –¥–µ—Ç–∞–ª–∏: "+str(data[6]) + "\n\n")
        conn.close()


def forget(bot, update, args, chat_data):

    chat_id = update.message.chat_id
    chat_usr = update.message.from_user.username


    checkuser(chat_id, chat_usr)

    codu = getuser(chat_id)

    if isinstance(args, list):

        if len(args) == 0:
            update.message.reply_text("–î—Ä—É–≥, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –¥–µ–ª–∞, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å!"
                                      "/forget <–Ω–æ–º–µ—Ä_–¥–µ–ª–∞>")
        else:
            conn = sqlite3.connect('todo.db')
            c = conn.cursor()
            c.execute('DELETE FROM todos WHERE uid=? and tid=?', (codu, args[0]))
            conn.commit()
            conn.close()
            update.message.reply_text("–•–æ—Ä–æ—à–æ, —è —á—É–≤—Å—Ç–≤—É—é —Å–µ–±—è —Å–≤–æ–±–æ–¥–Ω–µ–µ —Å–µ–π—á–∞—Å!üëæ")
        return

    else:
        conn = sqlite3.connect('todo.db')
        c = conn.cursor()
        c.execute('DELETE FROM todos WHERE uid=? and tid=?', (codu, args))
        conn.commit()
        conn.close()

        unset(bot, update, chat_data)


def free(bot, update, chat_data):

    chat_id = update.message.chat_id
    chat_usr = update.message.from_user.username


    checkuser(chat_id, chat_usr)

    codu = getuser(chat_id)

    conn = sqlite3.connect('todo.db')
    c = conn.cursor()
    c.execute('SELECT * FROM todos where uid=?', (codu,))
    data = c.fetchall()
    if len(data) != 0:
        for row in data:
            forget(bot, update, row[0], chat_data)

    update.message.reply_text("–î—Ä—É–≥, —è —É—Ö–æ–∂—É –≤ –æ—Ç–ø—É—Å–∫! –ù–∞–∫–æ–Ω–µ—Ü —è —Å–≤–æ–±–æ–¥–µ–Ω... üòé")


def default(bot, update):

    update.message.reply_text("–¥–∞... —Ç—ã –ø—Ä–∞–≤!")

def manage_command(bot, update):
    update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ù–∞–∂–º–∏ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π")


def error(bot, update, error):

    logger.warning('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ "%s" –≤—ã–∑–≤–∞–ª–æ –æ—à–∏–±–∫—É "%s"', update, error)


def checkuser(chat_id, chat_usr):

    conn = sqlite3.connect('todo.db')
    c = conn.cursor()
    c.execute('SELECT COUNT(*) FROM user WHERE username=? or chat_id=?', (chat_usr, chat_id))
    data = c.fetchall()
    if data.pop(0)[0] == 0:
        print("new user found")
        c.execute('INSERT INTO user(username, chat_id) VALUES (?,?)', (chat_usr, chat_id))
    else:

        c.execute('UPDATE user SET username=?, chat_id=? WHERE chat_id=?', (chat_usr, chat_id, chat_id))

    conn.commit()
    conn.close()


def getuser(chat_id):

    conn = sqlite3.connect('todo.db')
    c = conn.cursor()
    c.execute('SELECT * FROM user WHERE chat_id=? ', (chat_id,))
    data = c.fetchall()

    if len(data) != 0:
        cod = data.pop(0)[0]
    else:
        cod = -1

    conn.close()
    return cod


def print_appointment(row):
    temp = ""
    temp += ("–î–µ–ª–æ: " + str(row[2]) + "[–∫–æ–¥:" + str(row[0]) + "]\n")
    if row[3] != 0:
        temp += ("–≤: " + str(row[3]))
    if row[5] != 0:
        temp += (" " + str(row[5]))
    if row[4] != 0:
        temp += ("\n–≤: " + str(row[4]))
    return temp


def delete_old_schedule(bot, update):
    conn = sqlite3.connect('todo.db')
    c = conn.cursor()
    c.execute('SELECT * FROM todos')
    data = c.fetchall()
    if len(data) != 0:
        actual_date = date.today()
        for row in data:

            if dateparser(row[3]) == "" or dateparser(row[3]) == -1:

                c.execute('DELETE FROM todos WHERE tid=?', (row[0],))


            if dateparser(row[3]) < actual_date:

                c.execute('DELETE FROM todos WHERE tid=?', (row[0],))
    conn.commit()
    conn.close()
    update.message.reply_text("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ! üôå")


def schedule(bot, update, args):

    chat_id = update.message.chat_id
    chat_usr = update.message.from_user.username


    checkuser(chat_id, chat_usr)


    codu = getuser(chat_id)
    if codu == -1:
        update.message.reply_text("–î—Ä—É–≥, –¥—É–º–∞—é —É –º–µ–Ω—è –ø—Ä–æ–±–ª–µ–º–∞...\n"
                                  "—è –Ω–µ –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å —Ç–æ, —á—Ç–æ —Ç—ã –ø—Ä–æ—Å–∏—à—å!\n")

    conn = sqlite3.connect('todo.db')
    c = conn.cursor()
    c.execute('SELECT * FROM todos WHERE uid=?', (codu,))
    data = c.fetchall()
    if len(data) != 0:
        actual_date = date.today()
        appointments = ""
        if len(args) != 1:
            if len(args) == 0:

                update.message.reply_text("üòµ –î—Ä—É–≥, —Ç–≤–æ–∏ –¥–µ–ª–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n")
                for row in data:
                    if dateparser(row[3]) != -1 and dateparser(row[3]) == actual_date:
                        appointments += ("üìå " + print_appointment(row)+"\n")
                update.message.reply_text(appointments+"\n")
            else:

                update.message.reply_text("üëÆ –î—Ä—É–≥, –¥—É–º–∞—é —Ç—ã –Ω–∞–ø–∏—Å–∞–ª —á—Ç–æ-—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ...\n\n")
        else:
            if args[0].find("/") != -1 or args[0].find("-") != -1:

                update.message.reply_text("üòµ –î—Ä—É–≥, —Ç–≤–æ–∏ –¥–µ–ª–∞ –Ω–∞ " + args[0] + ":\n\n")
                for row in data:
                    if dateparser(row[3]) != -1 and dateparser(row[3]) == dateparser(args[0]):
                        appointments += ("üìå " + print_appointment(row) + "\n")
                   # else:
                    #    update.message.reply_text("üòµ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö! –Ø –Ω–µ –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ \n\n")
                update.message.reply_text(appointments + "\n")
            elif args[0] == "–≤—Å–µ":

                update.message.reply_text("üòµ –î—Ä—É–≥, –≤—Å–µ —Ç–≤–æ–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–µ–ª–∞:\n\n")
                for row in data:
                    appointments += ("üìå " + print_appointment(row) + "\n")
                update.message.reply_text(appointments + "\n")
            else:

                update.message.reply_text("üòµ –î—Ä—É–≥, —Ç–≤–æ–∏ –¥–µ–ª–∞:\n\n")
                for row in data:
                    if dateparser(row[3]) != -1 and dateparser(row[3]) < (actual_date + timedelta(days=int(args[0]))):
                        appointments += ("üìå " + print_appointment(row) + "\n")
                update.message.reply_text(appointments + "\n")
        conn.close()

        update.message.reply_text("\n–•–æ—á–µ—à—å –∑–Ω–∞—Ç—å —á—Ç–æ-—Ç–æ –µ—â—ë??\n"
                                  "–ü–æ–ø—Ä–æ–±—É–π:\n\n"
                                  "  /schedule             - –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö –¥–µ–ª –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
                                  "  /schedule <–¥–¥/–º–º/–≥–≥–≥–≥>  - –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–µ–ª –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å\n"
                                  "  /schedule <# –¥–Ω–µ–π> - –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–µ–ª –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ #n –¥–Ω–µ–π\n"
                                  "  /schedule –≤—Å–µ         - –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–µ–ª\n")
    else:
        update.message.reply_text("–î—Ä—É–≥, —è –Ω–µ –ø–æ–º–Ω—é –¥–µ–ª –Ω–∞ —Å–µ–≥–æ–¥–Ω—è! –¢–∞–∫ —á—Ç–æ —Ä–∞—Å—Å–ª–∞–±—å—Å—è üéâ \n\n")


def own(bot, update):
    update.message.reply_text("_")


def main():

    updater = Updater("5070651489:AAFR7rtgBaSFmWXYPzqCOx-vjDK-iBPYMYk")


    dp = updater.dispatcher


    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("help", help))


    dp.add_handler(CommandHandler("remember", remember,
                                  pass_args=True,
                                  pass_job_queue=True,
                                  pass_chat_data=True))
    dp.add_handler(CommandHandler("forget", forget,
                                  pass_args=True,
                                  pass_chat_data=True))
    dp.add_handler(CommandHandler("schedule", schedule,
                                  pass_args=True))
    dp.add_handler(CommandHandler("info", info,
                                  pass_args=True))
    dp.add_handler(CommandHandler("free", free, 
                                  pass_chat_data=True))
    dp.add_handler(CommandHandler("clean", delete_old_schedule))
    dp.add_handler(CommandHandler("set", set_timer,
                                  pass_args=True,
                                  pass_job_queue=True,
                                  pass_chat_data=True))
    dp.add_handler(CommandHandler("unset", unset,
                                  pass_chat_data=True))


    dp.add_handler(CommandHandler("own", own))


    dp.add_handler(MessageHandler(Filters.text, default))
    dp.add_handler(MessageHandler(Filters.command, manage_command))


    dp.add_error_handler(error)


    dp.add_error_handler(error)


    updater.start_polling()


    updater.idle()

if __name__ == '__main__':
   main()

